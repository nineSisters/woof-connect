openapi: 3.0.4
info:
  title: "Dog Profile API ${VERSION_APP}"
  description: API for interacting with dog profiles, friendships, locations, and notifications.
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: http://localhost:8080/v1
tags:
  - name: dogProfile
    description: Управление профилями собак
  - name: friendship
    description: Управление дружбой и взаимоотношениями между собаками
  - name: location
    description: Управление логами локаций собак
  - name: notification
    description: Управление уведомлениями между собаками

paths:
  /dog-profile/create:
    post:
      tags:
        - dogProfile
      summary: Create dog profile
      operationId: dogProfileCreate
      requestBody:
        description: Request body for creating a dog profile
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DogProfileCreateRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DogProfileCreateResponse'

  /dog-profile/read:
    post:
      tags:
        - dogProfile
      summary: Read dog profile
      operationId: dogProfileRead
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DogProfileReadRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DogProfileReadResponse'

  /dog-profile/update:
    post:
      tags:
        - dogProfile
      summary: Update dog profile
      operationId: dogProfileUpdate
      requestBody:
        description: Request body for updating a dog profile
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DogProfileUpdateRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DogProfileUpdateResponse'

  /dog-profile/delete:
    post:
      tags:
        - dogProfile
      summary: Delete dog profile
      operationId: dogProfileDelete
      requestBody:
        description: Request body for deleting a dog profile
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DogProfileDeleteRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DogProfileDeleteResponse'

  /friendship/manage:
    post:
      tags:
        - friendship
      summary: Manage friendship status
      operationId: friendshipManage
      requestBody:
        description: Request body for creating or updating friendship status
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FriendshipManageRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FriendshipManageResponse'

  /dog-location/log:
    post:
      tags:
        - location
      summary: Log a dog's location
      operationId: dogLocationLog
      requestBody:
        description: Request body for logging a dog's location
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationLogRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationLogResponse'

components:
  schemas:

    Error:
      type: object
      required: [ code ]
      properties:
        code:
          type: integer
          format: int32
        field:
          type: string
        message:
          type: string

    UserId:
      type: object
      required: [ id ]
      properties:
        id:
          type: integer
          format: int64

    BaseResponse:
      type: object
      required: [ result ]
      properties:
        isSuccess:
          type: boolean
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'

    DogId:
      type: object
      required: [ id ]
      properties:
        id:
          type: integer
          format: int64

    DogProfileBase:
      type: object
      required:
        - name
        - ownerId
        - dogId
      properties:
        ownerId:
          $ref: '#/components/schemas/UserId'
        dogId:
          $ref: '#/components/schemas/DogId'
        name:
          type: string
          example: "Buddy"
        breed:
          type: string
          example: "LABRADOR"
        age:
          type: integer
          example: 3
        weight:
          type: number
          format: float
          example: 25.5
        description:
          type: string
          example: "Friendly and playful dog"
        photoUrl:
          type: string
          format: uri
          example: "http://example.com/photo.jpg"

    DogProfileCreateRequest:
      type: object
      required: [ dogProfile ]
      properties:
        dogProfile:
          $ref: '#/components/schemas/DogProfileBase'

    DogProfileCreateResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/DogId'

    DogProfileReadRequest:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/DogId'
          required: true

    DogProfileReadResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            dogProfile:
              $ref: '#/components/schemas/DogProfileBase'

    DogProfileUpdateRequest:
      allOf:
        - $ref: '#/components/schemas/DogProfileCreateRequest'

    DogProfileUpdateResponse:
      allOf:
       - $ref: '#/components/schemas/DogProfileCreateResponse'

    DogProfileDeleteRequest:
      type: object
      required: [ id ]
      properties:
        id:
          $ref: '#/components/schemas/DogId'

    DogProfileDeleteResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'

    # Friendship Status Schemas
    FriendshipManageRequest:
      type: object
      required: [ dogId1, dogId2, status ]
      properties:
        dogId1:
          $ref: '#/components/schemas/DogId'
        dogId2:
          $ref: '#/components/schemas/DogId'
        status:
          type: string
          enum: [ FRIEND, ENEMY, NEUTRAL ]

    FriendshipManageResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            status:
              $ref: '#/components/schemas/FriendshipManageRequest'

    # Location Schemas
#    LocationLogRequest:
#      type: object
#      required: [ latitude, longitude ]
#      properties:
#        latitude:
#          type: number
#          format: double
#        longitude:
#          type: number
#          format: double
#
#    LocationLogResponse:
#      allOf:
#        - $ref: '#/components/schemas/BaseResponse'
